<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
    <!-- Web容器加载顺序ServletContext-context-param->listener->filter->servlet -->

    <!-- 指定Spring的配置文件 -->
    <!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->
    <!-- 通过ContextLoaderListener的父类ContextLoader的第120行发现CONFIG_LOCATION_PARAM固定为contextConfigLocation -->
    <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:../resources/spring/ApplicationContext.xml</param-value>
	</context-param>

	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>

    <!-- Shiro filter start 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>
            org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
        <init-param>
            <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- Shiro filter end -->

    <!-- 解决乱码问题 start-->
    <!-- forceEncoding默认为false,此时效果可大致理解为request.setCharacterEncoding("UTF-8") -->
    <!-- forceEncoding=true后,可大致理解为request.setCharacterEncoding("UTF-8")和response.setCharacterEncoding("UTF-8") -->
    <filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
    <!-- 解决乱码问题 end-->

	<!-- 连接池 启用Web监控统计功能   start-->
	<filter>
		<filter-name>DruidWebStatFilter</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>DruidWebStatFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	<!-- 连接池 启用Web监控统计功能   end-->

	<!--<filter>
		<filter-name>loginFilter</filter-name>
		<filter-clcom.jettm.fh.filter.LoginFilter</filter-class>
	</filter>-->

	<listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 实例化Spring容器 -->
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,自动装配ApplicationContext的配置信息,
    其默认会到WEB-INF中查找applicationContext.xml -->
    <!-- http://starscream.iteye.com/blog/1107036 -->
    <!-- http://www.davenkin.me/post/2012-10-18/40039948363 -->
    <!-- WebApplicationContextUtils.getWebApplicationContext() -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

    <!-- SpringMVC核心分发器 -->
    <servlet>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
            <param-value>classpath:../resources/spring/ApplicationContext-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- tomcat等 启动之前执行 -->
	<!--<filter>
		<filter-name>startFilter</filter-name>
		<filter-clcom.jettm.fh.filter.startFilter</filter-class>
	</filter>-->

<!--	<error-page>
		<error-code>404</error-code>
		<location>/404.jsp</location>
	</error-page>-->
	
<!--
	 <error-page>
	    <error-code>405</error-code>
	   <location>/WEB-INF/405.html</location>
	 </error-page>
	 <error-page>
	   <error-code>404</error-code>
	   <location>/WEB-INF/404.html</location>
	 </error-page>
	 <error-page>
	   <error-code>500</error-code>
	   <location>/WEB-INF/500.html</location>
	 </error-page>
	 <error-page>
	   <error-code>javax.servle.ServletException</error-code>
	   <location>/WEB-INF/error.html</location>
	 </error-page>
	 <error-page>
	   <error-code>java.lang.NullPointerException</error-code>
	   <location>/WEB-INF/error.html</location>
	 </error-page>
-->
    <!-- Session超时600分钟即10小时(零或负数表示会话永不超时) -->
	<session-config>
		<session-timeout>600</session-timeout>
	</session-config>
</web-app>